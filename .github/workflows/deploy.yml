name: Deploy Unity Chatbot

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      
      - name: Ensure ECR repository exists
        env:
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY || 'unity-chatbot' }}
        run: |
          # Check if repository exists, create if it doesn't
          if ! aws ecr describe-repositories --repository-names $ECR_REPOSITORY 2>/dev/null; then
            echo "Creating ECR repository $ECR_REPOSITORY"
            aws ecr create-repository --repository-name $ECR_REPOSITORY
          else
            echo "ECR repository $ECR_REPOSITORY already exists"
          fi
      
      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY || 'unity-chatbot' }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
      
      - name: Check if CloudFormation stack exists
        id: check-stack
        run: |
          if aws cloudformation describe-stacks --stack-name unity-chatbot-stack 2>&1 | grep -q "Stack with id unity-chatbot-stack does not exist"; then
            echo "stack_exists=false" >> $GITHUB_OUTPUT
          else
            echo "stack_exists=true" >> $GITHUB_OUTPUT
          fi
      
      - name: Create CloudFormation stack if it doesn't exist
        if: steps.check-stack.outputs.stack_exists == 'false'
        run: |
          echo "Creating CloudFormation stack..."
          aws cloudformation create-stack \
            --stack-name unity-chatbot-stack \
            --template-body file://cloudformation-template.yml \
            --parameters \
              ParameterKey=DomainName,ParameterValue=${{ secrets.DOMAIN_NAME }} \
              ParameterKey=CertificateArn,ParameterValue=${{ secrets.CERTIFICATE_ARN }} \
              ParameterKey=EnvironmentName,ParameterValue=prod \
              ParameterKey=ECRRepositoryName,ParameterValue=${{ secrets.ECR_REPOSITORY || 'unity-chatbot' }} \
              ParameterKey=ECSClusterName,ParameterValue=unity-chatbot-cluster \
              ParameterKey=ECSServiceName,ParameterValue=unity-chatbot-service \
              ParameterKey=KnowledgeBaseId,ParameterValue=${{ secrets.KNOWLEDGE_BASE_ID || '0G0DQEDJAO' }} \
              ParameterKey=S3BucketName,ParameterValue=${{ secrets.S3_BUCKET_NAME || 'umass-unity-chatbot' }} \
              ParameterKey=S3FolderPrefix,ParameterValue=${{ secrets.S3_FOLDER_PREFIX || 'documents/' }} \
              ParameterKey=UnityUsername,ParameterValue=${{ secrets.UNITY_USERNAME || 'unity_team' }} \
              ParameterKey=UnityPassword,ParameterValue=${{ secrets.UNITY_PASSWORD || '123' }} \
              ParameterKey=SlackBotToken,ParameterValue=${{ secrets.SLACK_BOT_TOKEN || '' }} \
              ParameterKey=SlackAppToken,ParameterValue=${{ secrets.SLACK_APP_TOKEN || '' }} \
              ParameterKey=DesiredCount,ParameterValue=1 \
            --capabilities CAPABILITY_IAM
          
          echo "Waiting for stack creation to complete..."
          
          # Monitor stack events during creation
          start_time=$(date +%s)
          while true; do
            status=$(aws cloudformation describe-stacks --stack-name unity-chatbot-stack --query "Stacks[0].StackStatus" --output text)
            echo "Current stack status: $status"
            
            # Get and display recent events
            echo "Recent stack events:"
            aws cloudformation describe-stack-events --stack-name unity-chatbot-stack --query "StackEvents[0:5].[LogicalResourceId,ResourceStatus,ResourceStatusReason]" --output table
            
            if [[ "$status" == "CREATE_COMPLETE" ]]; then
              echo "Stack creation completed successfully!"
              break
            elif [[ "$status" == *"FAILED"* ]]; then
              echo "Stack creation failed!"
              aws cloudformation describe-stack-events --stack-name unity-chatbot-stack --query "StackEvents[?ResourceStatus=='CREATE_FAILED'].[LogicalResourceId,ResourceStatusReason]" --output table
              exit 1
            fi
            
            # Check if we've been waiting too long (30 minutes)
            current_time=$(date +%s)
            if (( current_time - start_time > 1800 )); then
              echo "Timeout waiting for stack creation!"
              exit 1
            fi
            
            sleep 30
          done
      
      - name: Update CloudFormation stack if it exists
        if: steps.check-stack.outputs.stack_exists == 'true'
        run: |
          echo "Updating CloudFormation stack..."
          update_output=$(aws cloudformation update-stack \
            --stack-name unity-chatbot-stack \
            --template-body file://cloudformation-template.yml \
            --parameters \
              ParameterKey=DomainName,ParameterValue=${{ secrets.DOMAIN_NAME }} \
              ParameterKey=CertificateArn,ParameterValue=${{ secrets.CERTIFICATE_ARN }} \
              ParameterKey=EnvironmentName,ParameterValue=prod \
              ParameterKey=ECRRepositoryName,ParameterValue=${{ secrets.ECR_REPOSITORY || 'unity-chatbot' }} \
              ParameterKey=ECSClusterName,ParameterValue=unity-chatbot-cluster \
              ParameterKey=ECSServiceName,ParameterValue=unity-chatbot-service \
              ParameterKey=KnowledgeBaseId,ParameterValue=${{ secrets.KNOWLEDGE_BASE_ID || '0G0DQEDJAO' }} \
              ParameterKey=S3BucketName,ParameterValue=${{ secrets.S3_BUCKET_NAME || 'umass-unity-chatbot' }} \
              ParameterKey=S3FolderPrefix,ParameterValue=${{ secrets.S3_FOLDER_PREFIX || 'documents/' }} \
              ParameterKey=UnityUsername,ParameterValue=${{ secrets.UNITY_USERNAME || 'unity_team' }} \
              ParameterKey=UnityPassword,ParameterValue=${{ secrets.UNITY_PASSWORD || '123' }} \
              ParameterKey=SlackBotToken,ParameterValue=${{ secrets.SLACK_BOT_TOKEN || '' }} \
              ParameterKey=SlackAppToken,ParameterValue=${{ secrets.SLACK_APP_TOKEN || '' }} \
              ParameterKey=DesiredCount,ParameterValue=1 \
            --capabilities CAPABILITY_IAM 2>&1) || echo "No updates to be performed"
          
          echo "$update_output"
          
          # Check if an update is actually happening
          if [[ "$update_output" != *"No updates"* ]]; then
            echo "Stack update initiated. Monitoring progress..."
            
            # Monitor stack events during update
            start_time=$(date +%s)
            while true; do
              status=$(aws cloudformation describe-stacks --stack-name unity-chatbot-stack --query "Stacks[0].StackStatus" --output text)
              echo "Current stack status: $status"
              
              # Get and display recent events
              echo "Recent stack events:"
              aws cloudformation describe-stack-events --stack-name unity-chatbot-stack --query "StackEvents[0:5].[LogicalResourceId,ResourceStatus,ResourceStatusReason]" --output table
              
              if [[ "$status" == "UPDATE_COMPLETE" ]]; then
                echo "Stack update completed successfully!"
                break
              elif [[ "$status" == *"FAILED"* || "$status" == *"ROLLBACK"* ]]; then
                echo "Stack update failed or is rolling back!"
                aws cloudformation describe-stack-events --stack-name unity-chatbot-stack --query "StackEvents[?contains(ResourceStatus, 'FAILED')].[LogicalResourceId,ResourceStatus,ResourceStatusReason]" --output table
                break
              fi
              
              # Check if we've been waiting too long (30 minutes)
              current_time=$(date +%s)
              if (( current_time - start_time > 1800 )); then
                echo "Timeout waiting for stack update!"
                break
              fi
              
              sleep 30
            done
          else
            echo "No updates to be performed on the CloudFormation stack."
          fi
      
      - name: Check if ECS service exists
        id: check-service
        run: |
          CLUSTER="unity-chatbot-cluster"
          SERVICE="unity-chatbot-service"
          if aws ecs describe-services --cluster $CLUSTER --services $SERVICE | grep -q "MISSING"; then
            echo "service_exists=false" >> $GITHUB_OUTPUT
          else
            echo "service_exists=true" >> $GITHUB_OUTPUT
          fi
      
      - name: Deploy to ECS
        if: steps.check-service.outputs.service_exists == 'true'
        run: |
          aws ecs update-service --cluster unity-chatbot-cluster \
                                --service unity-chatbot-service \
                                --force-new-deployment