# filename: .github/workflows/deploy-slack-lambda.yml

name: Deploy Unity Slack Bot to AWS Lambda

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Get AWS Account ID
        id: get_account_id
        run: |
          AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          echo "AWS_ACCOUNT_ID=$AWS_ACCOUNT_ID" >> $GITHUB_ENV
      
      - name: Create/Update IAM role for Lambda
        id: iam_role
        run: |
          ROLE_NAME="unity-slack-lambda-role"
          echo "Ensuring IAM role '$ROLE_NAME' exists..."
          if ! aws iam get-role --role-name $ROLE_NAME > /dev/null 2>&1; then
            echo "Role does not exist. Creating role..."
            aws iam create-role --role-name $ROLE_NAME --assume-role-policy-document file://<(echo '{
              "Version": "2012-10-17",
              "Statement": [{ "Effect": "Allow", "Principal": {"Service": "lambda.amazonaws.com"}, "Action": "sts:AssumeRole" }]
            }')
            sleep 10 # Allow time for role propagation
          else
            echo "Role '$ROLE_NAME' already exists."
          fi
          
          echo "Attaching required policies..."
          aws iam attach-role-policy --role-name $ROLE_NAME --policy-arn arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
          
          # Create and attach a custom policy for Bedrock and S3 access
          POLICY_NAME="UnitySlackBotBedrockS3Policy"
          POLICY_DOCUMENT=$(cat <<EOF
          {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Sid": "BedrockAccess",
                "Effect": "Allow",
                "Action": [
                  "bedrock:InvokeModel",
                  "bedrock:Converse",
                  "bedrock-agent-runtime:Retrieve"
                ],
                "Resource": "*"
              },
              {
                "Sid": "S3ReadOnly",
                "Effect": "Allow",
                "Action": "s3:GetObject",
                "Resource": "arn:aws:s3:::${{ secrets.S3_BUCKET_NAME }}/*"
              }
            ]
          }
EOF
          )
          POLICY_ARN=$(aws iam create-policy --policy-name $POLICY_NAME --policy-document "$POLICY_DOCUMENT" --query 'Policy.Arn' --output text 2>/dev/null || aws iam list-policies --query "Policies[?PolicyName=='$POLICY_NAME'].Arn" --output text)
          aws iam attach-role-policy --role-name $ROLE_NAME --policy-arn $POLICY_ARN
          echo "ROLE_ARN_VALUE=$(aws iam get-role --role-name $ROLE_NAME --query 'Role.Arn' --output text)"
          echo "role_arn=$ROLE_ARN_VALUE" >> $GITHUB_OUTPUT

      - name: Create Lambda deployment package
        run: |
          mkdir -p package
          pip install -r requirements.txt -t ./package
          # Copy your main lambda file and the utils directory into the package
          cp slack_lambda/slack_lambda.py ./package/
          cp -r utils ./package/
          cd package
          zip -r ../lambda-deployment-package.zip .
          
      - name: Deploy Lambda function
        run: |
          FUNCTION_NAME="unity-slack-lambda"
          if ! aws lambda get-function --function-name $FUNCTION_NAME > /dev/null 2>&1; then
            echo "Creating new Lambda function..."
            aws lambda create-function \
              --function-name $FUNCTION_NAME \
              --runtime python3.12 \
              --role ${{ steps.iam_role.outputs.role_arn }} \
              --handler slack_lambda.handler \
              --zip-file fileb://lambda-deployment-package.zip \
              --timeout 30 \
              --memory-size 1024
          else
            echo "Updating existing Lambda function code..."
            aws lambda update-function-code \
              --function-name $FUNCTION_NAME \
              --zip-file fileb://lambda-deployment-package.zip
          fi
          
          echo "Updating function configuration (env vars, timeout, memory)..."
          aws lambda update-function-configuration \
            --function-name $FUNCTION_NAME \
            --timeout 30 \
            --memory-size 1024 \
            --environment "Variables={
              SLACK_SIGNING_SECRET=${{ secrets.SLACK_SIGNING_SECRET }},
              SLACK_BOT_TOKEN=${{ secrets.SLACK_BOT_TOKEN }},
              KNOWLEDGE_BASE_ID=${{ secrets.KNOWLEDGE_BASE_ID }},
              S3_BUCKET_NAME=${{ secrets.S3_BUCKET_NAME }}
            }"

      - name: Create or Update API Gateway and Integration
        run: |
          API_NAME="unity-slack-bot-api"
          FUNCTION_NAME="unity-slack-lambda"
          LAMBDA_ARN="arn:aws:lambda:us-east-1:${{ env.AWS_ACCOUNT_ID }}:function:$FUNCTION_NAME"
          
          API_ID=$(aws apigatewayv2 get-apis --query "Items[?Name=='$API_NAME'].ApiId" --output text)
          if [ -z "$API_ID" ]; then
            echo "Creating API Gateway..."
            API_ID=$(aws apigatewayv2 create-api --name $API_NAME --protocol-type HTTP --target $LAMBDA_ARN --query 'ApiId' --output text)
          else
            echo "API Gateway '$API_NAME' already exists with ID: $API_ID"
          fi
          
          ENDPOINT_URL=$(aws apigatewayv2 get-api --api-id $API_ID --query 'ApiEndpoint' --output text)
          echo "ENDPOINT_URL=$ENDPOINT_URL" >> $GITHUB_ENV
          
          # Add permission for API Gateway to invoke Lambda if it doesn't exist
          STATEMENT_ID="apigateway-slack-invoke-permission"
          if ! aws lambda get-policy --function-name $FUNCTION_NAME | grep -q $STATEMENT_ID; then
              aws lambda add-permission \
                --function-name $FUNCTION_NAME \
                --statement-id $STATEMENT_ID \
                --action lambda:InvokeFunction \
                --principal apigateway.amazonaws.com \
                --source-arn "arn:aws:execute-api:us-east-1:${{ env.AWS_ACCOUNT_ID }}:$API_ID/*/*"
          fi

      - name: Final Output
        run: |
          echo "âœ… Deployment successful!"
          echo "Update your Slack App's 'Event Subscriptions' Request URL to: ${{ env.ENDPOINT_URL }}/slack/events"