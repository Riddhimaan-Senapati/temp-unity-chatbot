name: Deploy Unity Slack Lambda

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy-lambda:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12' # Corrected to Python 3.12 as per user instruction
      
      - name: Get AWS Account ID
        run: |
          AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          echo "AWS_ACCOUNT_ID=$AWS_ACCOUNT_ID" >> $GITHUB_ENV
          echo "Using AWS Account ID: $AWS_ACCOUNT_ID"
      
      - name: Create IAM role for Lambda
        id: create_iam_role # Add an ID to this step to reference its outputs
        run: |
          set -euxo pipefail # Enable debug and exit on error/unset variable/pipefail
          ROLE_NAME="unity-slack-lambda-role"
          
          # Check if role exists
          if ! aws iam get-role --role-name $ROLE_NAME 2>/dev/null; then
            echo "Creating IAM role..."
            aws iam create-role \
              --role-name $ROLE_NAME \
              --assume-role-policy-document '{
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {"Service": "lambda.amazonaws.com"},
                    "Action": "sts:AssumeRole"
                  }
                ]
              }' \
              --tags Key=PROJECT,Value=ai4cw
            
            # Attach policies
            aws iam attach-role-policy --role-name $ROLE_NAME --policy-arn arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
            aws iam attach-role-policy --role-name $ROLE_NAME --policy-arn arn:aws:iam::aws:policy/AmazonBedrockFullAccess
            aws iam attach-role-policy --role-name $ROLE_NAME --policy-arn arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess
            
            # Add explicit Bedrock permissions
            aws iam put-role-policy --role-name $ROLE_NAME --policy-name BedrockConversePolicy --policy-document '{
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "bedrock:InvokeModel",
                    "bedrock:Converse",
                    "bedrock:ConverseStream",
                    "bedrock:Retrieve",
                    "bedrock:RetrieveAndGenerate"
                  ],
                  "Resource": "*"
                }
              ]
            }'

            # Add permission for Lambda to invoke itself asynchronously
            aws iam put-role-policy --role-name $ROLE_NAME --policy-name LambdaSelfInvokePolicy --policy-document '{
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": "lambda:InvokeFunction",
                  "Resource": "arn:aws:lambda:us-east-1:${{ env.AWS_ACCOUNT_ID }}:function:unity-slack-lambda"
                }
              ]
            }'
            
            echo "Waiting for role to be available..."
            sleep 10
          else
            echo "IAM role already exists: $ROLE_NAME"
            # Ensure all required policies are attached
            echo "Verifying policy attachments..."
            aws iam attach-role-policy --role-name $ROLE_NAME --policy-arn arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole 2>/dev/null || echo "Basic execution policy already attached"
            aws iam attach-role-policy --role-name $ROLE_NAME --policy-arn arn:aws:iam::aws:policy/AmazonBedrockFullAccess 2>/dev/null || echo "Bedrock policy already attached"
            aws iam attach-role-policy --role-name $ROLE_NAME --policy-arn arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess 2>/dev/null || echo "S3 policy already attached"
            
            # Add explicit Bedrock permissions for existing role
            aws iam put-role-policy --role-name $ROLE_NAME --policy-name BedrockConversePolicy --policy-document '{
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "bedrock:InvokeModel",
                    "bedrock:Converse",
                    "bedrock:ConverseStream",
                    "bedrock:Retrieve",
                    "bedrock:RetrieveAndGenerate"
                  ],
                  "Resource": "*"
                }
              ]
            }' 2>/dev/null || echo "Bedrock Converse policy already attached"

            # Add permission for Lambda to invoke itself asynchronously for existing role
            aws iam put-role-policy --role-name $ROLE_NAME --policy-name LambdaSelfInvokePolicy --policy-document '{
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": "lambda:InvokeFunction",
                  "Resource": "arn:aws:lambda:us-east-1:${{ env.AWS_ACCOUNT_ID }}:function:unity-slack-lambda"
                }
              ]
            }' 2>/dev/null || echo "Lambda Self Invoke policy already attached"
          fi
          
          # Capture ROLE_ARN and set as output
          ROLE_ARN_VALUE=$(aws iam get-role --role-name $ROLE_NAME --query 'Role.Arn' --output text)
          echo "Resolved ROLE_ARN: $ROLE_ARN_VALUE"
          echo "role_arn=$ROLE_ARN_VALUE" >> $GITHUB_OUTPUT # Set as step output
      
      - name: Debug IAM Role Outputs
        run: |
          echo "Outputs from create_iam_role step:"
          echo "role_arn: ${{ steps.create_iam_role.outputs.role_arn }}"

      - name: Create Lambda deployment package
        run: |
          rm -rf lambda-package # Explicitly remove the directory
          mkdir -p lambda-package
          # Ensure slack_lambda.py is at the root of the deployment package
          cp slack_lambda/slack_lambda.py lambda-package/
          # Create vendor directory inside lambda-package
          mkdir -p lambda-package/vendor
          # Install dependencies into the vendor directory
          pip install -r slack_lambda/slack_lambda_requirements.txt -t lambda-package/vendor --no-cache-dir --upgrade
          # Copy utils directory to lambda-package, which is needed by slack_lambda.py
          cp -r utils lambda-package/
          cd lambda-package
          # --- DEBUG STEP: Verify slack-bolt version and package contents ---
          echo "Contents of lambda-package after pip install:"
          ls -lR .
          echo "Checking slack-bolt version:"
          python -c "import slack_bolt; print(slack_bolt.__version__)" || echo "slack_bolt not found or version check failed"
          # --- END DEBUG STEP ---
          # Remove unnecessary files
          find . -type d -name "__pycache__" -exec rm -rf {} + 2>/dev/null || true
          find . -name "*.pyc" -delete 2>/dev/null || true
          find . -type d -name "*.dist-info" -exec rm -rf {} + 2>/dev/null || true
          find . -type d -name "*.egg-info" -exec rm -rf {} + 2>/dev/null || true
          find . -name "test*" -type d -exec rm -rf {} + 2>/dev/null || true
          zip -r ../unity-slack-lambda.zip . -x "*.pyc" "*/__pycache__/*"
      
      - name: Deploy Lambda function
        run: |
          FUNCTION_NAME="unity-slack-lambda"
          ROLE_ARN="arn:aws:iam::$AWS_ACCOUNT_ID:role/unity-slack-lambda-role"
          
          if aws lambda get-function --function-name $FUNCTION_NAME 2>/dev/null; then
            echo "Updating existing Lambda function..."
            aws lambda update-function-code \
              --function-name $FUNCTION_NAME \
              --zip-file fileb://unity-slack-lambda.zip
            
            echo "Waiting for function update to complete..."
            aws lambda wait function-updated --function-name $FUNCTION_NAME
            
            aws lambda update-function-configuration \
              --function-name $FUNCTION_NAME \
              --timeout 300 \
              --memory-size 1024 \
              --environment Variables="{
                SLACK_BOT_TOKEN=${{ secrets.SLACK_BOT_TOKEN }},
                SLACK_SIGNING_SECRET=${{ secrets.SLACK_SIGNING_SECRET }},
                KNOWLEDGE_BASE_ID=${{ secrets.KNOWLEDGE_BASE_ID }},
                S3_BUCKET_NAME=${{ secrets.S3_BUCKET_NAME }},
                S3_FOLDER_PREFIX=${{ secrets.S3_FOLDER_PREFIX }},
                UNITY_USERNAME=${{ secrets.UNITY_USERNAME }},
                UNITY_PASSWORD=${{ secrets.UNITY_PASSWORD }}
              }"
          else
            echo "Creating new Lambda function..."
            aws lambda create-function \
              --function-name $FUNCTION_NAME \
              --runtime python3.12 \
              --role $ROLE_ARN \
              --handler slack_lambda.handler \
              --zip-file fileb://unity-slack-lambda.zip \
              --timeout 300 \
              --memory-size 1024 \
              --environment Variables="{
                SLACK_BOT_TOKEN=${{ secrets.SLACK_BOT_TOKEN }},
                SLACK_SIGNING_SECRET=${{ secrets.SLACK_SIGNING_SECRET }},
                KNOWLEDGE_BASE_ID=${{ secrets.KNOWLEDGE_BASE_ID }},
                S3_BUCKET_NAME=${{ secrets.S3_BUCKET_NAME }},
                S3_FOLDER_PREFIX=${{ secrets.S3_FOLDER_PREFIX }},
                UNITY_USERNAME=${{ secrets.UNITY_USERNAME }},
                UNITY_PASSWORD=${{ secrets.UNITY_PASSWORD }}
              }" \
              --tags PROJECT=ai4cw
          fi
      
      - name: Create API Gateway
        run: |
          API_NAME="unity-slack-api"
          FUNCTION_NAME="unity-slack-lambda"
          
          # Check if API exists
          API_ID=$(aws apigateway get-rest-apis --query "items[?name=='$API_NAME'].id" --output text)
          
          if [ "$API_ID" = "None" ] || [ -z "$API_ID" ]; then
            echo "Creating API Gateway..."
            API_ID=$(aws apigateway create-rest-api \
              --name $API_NAME \
              --description "Unity Slack Bot API" \
              --tags PROJECT=ai4cw \
              --query 'id' --output text)
          else
            echo "API Gateway already exists: $API_ID"
            # Update tags if needed
            aws apigateway tag-resource \
              --resource-arn "arn:aws:apigateway:us-east-1::/restapis/$API_ID" \
              --tags PROJECT=ai4cw || echo "Failed to update tags"
          fi
          
          echo "API_ID=$API_ID" >> $GITHUB_ENV
          
          # Get root resource ID
          ROOT_ID=$(aws apigateway get-resources --rest-api-id $API_ID --query "items[?path=='/'].id" --output text)
          
          # Create /slack resource if it doesn't exist
          SLACK_RESOURCE_ID=$(aws apigateway get-resources --rest-api-id $API_ID --query "items[?pathPart=='slack'].id" --output text)
          if [ "$SLACK_RESOURCE_ID" = "None" ] || [ -z "$SLACK_RESOURCE_ID" ]; then
            echo "Creating /slack resource..."
            SLACK_RESOURCE_ID=$(aws apigateway create-resource \
              --rest-api-id $API_ID \
              --parent-id $ROOT_ID \
              --path-part slack \
              --query 'id' --output text)
          else
            echo "/slack resource already exists"
          fi
          
          # Create POST method if it doesn't exist
          if ! aws apigateway get-method --rest-api-id $API_ID --resource-id $SLACK_RESOURCE_ID --http-method POST 2>/dev/null; then
            echo "Creating POST method..."
            aws apigateway put-method \
              --rest-api-id $API_ID \
              --resource-id $SLACK_RESOURCE_ID \
              --http-method POST \
              --authorization-type NONE
          else
            echo "POST method already exists"
          fi
          
          # Set up Lambda integration (put-integration is idempotent)
          LAMBDA_ARN="arn:aws:lambda:us-east-1:$AWS_ACCOUNT_ID:function:$FUNCTION_NAME"
          echo "Setting up Lambda integration..."
          aws apigateway put-integration \
            --rest-api-id $API_ID \
            --resource-id $SLACK_RESOURCE_ID \
            --http-method POST \
            --type AWS_PROXY \
            --integration-http-method POST \
            --uri "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/$LAMBDA_ARN/invocations"
          
          # Grant API Gateway permission to invoke Lambda (check if exists first)
          STATEMENT_ID="apigateway-invoke-unity-slack"
          if ! aws lambda get-policy --function-name $FUNCTION_NAME --query "Policy" --output text 2>/dev/null | grep -q "$STATEMENT_ID"; then
            echo "Adding Lambda permission for API Gateway..."
            aws lambda add-permission \
              --function-name $FUNCTION_NAME \
              --statement-id $STATEMENT_ID \
              --action lambda:InvokeFunction \
              --principal apigateway.amazonaws.com \
              --source-arn "arn:aws:execute-api:us-east-1:$AWS_ACCOUNT_ID:$API_ID/*/*"
          else
            echo "Lambda permission for API Gateway already exists"
          fi
          
          # Deploy API (check if deployment needed)
          echo "Deploying API to prod stage..."
          aws apigateway create-deployment \
            --rest-api-id $API_ID \
            --stage-name prod \
            --description "Deployment $(date +'%Y-%m-%d %H:%M:%S')"
          
          # Output the endpoint URL
          ENDPOINT_URL="https://$API_ID.execute-api.us-east-1.amazonaws.com/prod/slack"
          echo "Slack Bot Endpoint: $ENDPOINT_URL"
          echo "ENDPOINT_URL=$ENDPOINT_URL" >> $GITHUB_ENV
      
      - name: Output deployment info
        run: |
          echo "🚀 Deployment Complete!"
          echo "Lambda Function: unity-slack-lambda"
          echo "API Gateway Endpoint: $ENDPOINT_URL"
          echo ""
          echo "Configure this endpoint in your Slack app:"
          echo "- Event Subscriptions Request URL: $ENDPOINT_URL"
          echo "- Slash Commands Request URL: $ENDPOINT_URL"