name: Deploy Unity Slack Lambda

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy-lambda:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12' # Corrected to Python 3.12 as per user instruction
      
      - name: Get AWS Account ID
        run: |
          AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          echo "AWS_ACCOUNT_ID=$AWS_ACCOUNT_ID" >> $GITHUB_ENV
          echo "Using AWS Account ID: $AWS_ACCOUNT_ID"
      
      - name: Create IAM role for Lambda
        id: create_iam_role # Add an ID to this step to reference its outputs
        run: |
          set -euxo pipefail # Enable debug and exit on error/unset variable/pipefail
          ROLE_NAME="unity-slack-lambda-role"
          
          # Check if role exists
          if ! aws iam get-role --role-name $ROLE_NAME 2>/dev/null; then
            echo "Creating IAM role..."
            aws iam create-role \
              --role-name $ROLE_NAME \
              --assume-role-policy-document '{
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {"Service": "lambda.amazonaws.com"},
                    "Action": "sts:AssumeRole"
                  }
                ]
              }' \
              --tags Key=PROJECT,Value=ai4cw
            
            # Attach policies
            aws iam attach-role-policy --role-name $ROLE_NAME --policy-arn arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
            aws iam attach-role-policy --role-name $ROLE_NAME --policy-arn arn:aws:iam::aws:policy/AmazonBedrockFullAccess
            aws iam attach-role-policy --role-name $ROLE_NAME --policy-arn arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess
            
            # Add explicit Bedrock permissions
            aws iam put-role-policy --role-name $ROLE_NAME --policy-name BedrockConversePolicy --policy-document '{
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "bedrock:InvokeModel",
                    "bedrock:Converse",
                    "bedrock:ConverseStream",
                    "bedrock:Retrieve",
                    "bedrock:RetrieveAndGenerate"
                  ],
                  "Resource": "*"
                }
              ]
            }'
            
            echo "Waiting for role to be available..."
            sleep 10
          else
            echo "IAM role already exists: $ROLE_NAME"
            # Ensure all required policies are attached
            echo "Verifying policy attachments..."
            aws iam attach-role-policy --role-name $ROLE_NAME --policy-arn arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole 2>/dev/null || echo "Basic execution policy already attached"
            aws iam attach-role-policy --role-name $ROLE_NAME --policy-arn arn:aws:iam::aws:policy/AmazonBedrockFullAccess 2>/dev/null || echo "Bedrock policy already attached"
            aws iam attach-role-policy --role-name $ROLE_NAME --policy-arn arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess 2>/dev/null || echo "S3 policy already attached"
            
            # Add explicit Bedrock permissions for existing role
            aws iam put-role-policy --role-name $ROLE_NAME --policy-name BedrockConversePolicy --policy-document '{
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "bedrock:InvokeModel",
                    "bedrock:Converse",
                    "bedrock:ConverseStream",
                    "bedrock:Retrieve",
                    "bedrock:RetrieveAndGenerate"
                  ],
                  "Resource": "*"
                }
              ]
            }' 2>/dev/null || echo "Bedrock Converse policy already attached"
          fi
          
          # Capture ROLE_ARN and set as output
          ROLE_ARN_VALUE=$(aws iam get-role --role-name $ROLE_NAME --query 'Role.Arn' --output text)
          echo "Resolved ROLE_ARN: $ROLE_ARN_VALUE"
          echo "role_arn=$ROLE_ARN_VALUE" >> $GITHUB_OUTPUT # Set as step output
      
      - name: Debug IAM Role Outputs
        run: |
          echo "Outputs from create_iam_role step:"
          echo "role_arn: ${{ steps.create_iam_role.outputs.role_arn }}"

      - name: Create Lambda deployment package
        run: |
          mkdir -p lambda-package
          cp slack_lambda/slack_lambda.py lambda-package/
          cp -r utils lambda-package/
          cd lambda-package
          # Install dependencies from requirements file
          pip install -r ../slack_lambda/slack_lambda_requirements.txt -t . --no-cache-dir
          # Remove unnecessary files
          find . -type d -name "__pycache__" -exec rm -rf {} + 2>/dev/null || true
          find . -name "*.pyc" -delete 2>/dev/null || true
          find . -type d -name "*.dist-info" -exec rm -rf {} + 2>/dev/null || true
          find . -type d -name "*.egg-info" -exec rm -rf {} + 2>/dev/null || true
          find . -name "test*" -type d -exec rm -rf {} + 2>/dev/null || true
          zip -r ../unity-slack-lambda.zip . -x "*.pyc" "*/__pycache__/*"
      
      - name: Deploy Lambda function
        run: |
          FUNCTION_NAME="unity-slack-lambda"
          ROLE_ARN="arn:aws:iam::$AWS_ACCOUNT_ID:role/unity-slack-lambda-role"
          
          if aws lambda get-function --function-name $FUNCTION_NAME 2>/dev/null; then
            echo "Updating existing Lambda function..."
            aws lambda update-function-code \
              --function-name $FUNCTION_NAME \
              --zip-file fileb://unity-slack-lambda.zip
            
            echo "Waiting for function update to complete..."
            aws lambda wait function-updated --function-name $FUNCTION_NAME
            
            aws lambda update-function-configuration \
              --function-name $FUNCTION_NAME \
              --timeout 300 \
              --memory-size 1024 \
              --environment Variables="{
                SLACK_BOT_TOKEN=${{ secrets.SLACK_BOT_TOKEN }},
                SLACK_SIGNING_SECRET=${{ secrets.SLACK_SIGNING_SECRET }},
                KNOWLEDGE_BASE_ID=${{ secrets.KNOWLEDGE_BASE_ID }},
                S3_BUCKET_NAME=${{ secrets.S3_BUCKET_NAME }},
                S3_FOLDER_PREFIX=${{ secrets.S3_FOLDER_PREFIX }},
                UNITY_USERNAME=${{ secrets.UNITY_USERNAME }},
                UNITY_PASSWORD=${{ secrets.UNITY_PASSWORD }}
              }"
          else
            echo "Creating new Lambda function..."
            aws lambda create-function \
              --function-name $FUNCTION_NAME \
              --runtime python3.12 \
              --role $ROLE_ARN \
              --handler slack_lambda.handler \
              --zip-file fileb://unity-slack-lambda.zip \
              --timeout 300 \
              --memory-size 1024 \
              --environment Variables="{
                SLACK_BOT_TOKEN=${{ secrets.SLACK_BOT_TOKEN }},
                SLACK_SIGNING_SECRET=${{ secrets.SLACK_SIGNING_SECRET }},
                KNOWLEDGE_BASE_ID=${{ secrets.KNOWLEDGE_BASE_ID }},
                S3_BUCKET_NAME=${{ secrets.S3_BUCKET_NAME }},
                S3_FOLDER_PREFIX=${{ secrets.S3_FOLDER_PREFIX }},
                UNITY_USERNAME=${{ secrets.UNITY_USERNAME }},
                UNITY_PASSWORD=${{ secrets.UNITY_PASSWORD }}
              }" \
              --tags PROJECT=ai4cw
          fi
      
      - name: Create Lambda Function URL
        run: |
          FUNCTION_NAME="unity-slack-lambda"
          
          # Create Lambda Function URL
          echo "Creating Lambda Function URL..."
          aws lambda create-function-url-config \
            --function-name $FUNCTION_NAME \
            --auth-type NONE \
            2>/dev/null || echo "Function URL already exists"
          
          # Get the Function URL
          FUNCTION_URL=$(aws lambda get-function-url-config --function-name $FUNCTION_NAME --query 'FunctionUrl' --output text)
          ENDPOINT_URL="$FUNCTION_URL"
          echo "Slack Bot Endpoint: $ENDPOINT_URL"
          echo "ENDPOINT_URL=$ENDPOINT_URL" >> $GITHUB_ENV
      
      - name: Output deployment info
        run: |
          echo "ðŸš€ Deployment Complete!"
          echo "Lambda Function: unity-slack-lambda"
          echo "Lambda Function URL: $ENDPOINT_URL"
          echo ""
          echo "Configure this endpoint in your Slack app:"
          echo "- Event Subscriptions Request URL: $ENDPOINT_URL"
          echo "- Slash Commands Request URL: $ENDPOINT_URL"
          echo ""
          echo "Note: Using Lambda Function URL (no API Gateway) for better performance"