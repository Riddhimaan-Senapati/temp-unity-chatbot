name: Deploy Documentation Scraper Lambda

on:
  push:
    branches: [main]
    paths:
      - "lambdas/documentation_scraper/**"
      - "utils/data_pipeline/**"
      - "cloudformation-templates/documentation-scraper-lambda.yml"
      - ".github/workflows/deploy-documentation-scraper.yml"
  workflow_dispatch:
    inputs:
      force_deploy:
        description: "Force deployment even without changes"
        required: false
        default: "false"
        type: boolean

jobs:
  deploy-infrastructure:
    runs-on: ubuntu-latest
    outputs:
      lambda-function-name: ${{ steps.get-outputs.outputs.lambda-function-name }}
      lambda-role-arn: ${{ steps.get-outputs.outputs.lambda-role-arn }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Deploy Infrastructure Stack
        run: |
          STACK_NAME="unity-documentation-scraper-stack"

          echo "Deploying CloudFormation stack: $STACK_NAME"
          aws cloudformation deploy \
            --template-file cloudformation-templates/documentation-scraper-lambda.yml \
            --stack-name $STACK_NAME \
            --parameter-overrides \
              ProjectTag=ai4cw \
              S3BucketName=${{ secrets.S3_BUCKET_NAME }} \
              S3FolderPrefix=documents/ \
              LambdaTimeout=900 \
              LambdaMemorySize=1024 \
              ScheduleExpression="cron(0 16 ? * SUN *)" \
              EnableScheduledExecution=true \
            --capabilities CAPABILITY_NAMED_IAM \
            --tags PROJECT=ai4cw

          echo "Stack deployment completed successfully"

      - name: Get Stack Outputs
        id: get-outputs
        run: |
          STACK_NAME="unity-documentation-scraper-stack"

          # Get outputs from CloudFormation stack
          LAMBDA_FUNCTION_NAME=$(aws cloudformation describe-stacks \
            --stack-name $STACK_NAME \
            --query 'Stacks[0].Outputs[?OutputKey==`LambdaFunctionName`].OutputValue' \
            --output text)

          LAMBDA_ROLE_ARN=$(aws cloudformation describe-stacks \
            --stack-name $STACK_NAME \
            --query 'Stacks[0].Outputs[?OutputKey==`LambdaRoleArn`].OutputValue' \
            --output text)

          echo "Lambda Function Name: $LAMBDA_FUNCTION_NAME"
          echo "Lambda Role ARN: $LAMBDA_ROLE_ARN"

          # Set outputs for next job
          echo "lambda-function-name=$LAMBDA_FUNCTION_NAME" >> $GITHUB_OUTPUT
          echo "lambda-role-arn=$LAMBDA_ROLE_ARN" >> $GITHUB_OUTPUT

  deploy-lambda:
    runs-on: ubuntu-latest
    needs: deploy-infrastructure

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Build and Publish Dependencies Layer
        id: lambda_layer
        run: |
          LAYER_NAME="documentation-scraper-dependencies"
          REQUIREMENTS_FILE="lambdas/documentation_scraper/requirements.txt"

          # Create the directory structure that Lambda Layers expect
          mkdir -p layer/python

          echo "Installing dependencies into layer directory..."
          pip install -r $REQUIREMENTS_FILE -t ./layer/python

          # Remove unnecessary files to reduce layer size
          echo "Cleaning up layer directory..."
          find ./layer/python -type d -name "__pycache__" -exec rm -rf {} + 2>/dev/null || true
          find ./layer/python -name "*.pyc" -delete 2>/dev/null || true
          find ./layer/python -name "*.pyo" -delete 2>/dev/null || true
          find ./layer/python -name "*.dist-info" -exec rm -rf {} + 2>/dev/null || true

          cd layer
          echo "Zipping the layer contents..."
          zip -r ../layer.zip . -x "*.pyc" "*/__pycache__/*"
          cd ..

          echo "Publishing new layer version..."
          LAYER_VERSION_ARN=$(aws lambda publish-layer-version \
            --layer-name $LAYER_NAME \
            --description "Dependencies for Documentation Scraper Lambda" \
            --zip-file fileb://layer.zip \
            --compatible-runtimes python3.12 \
            --query 'LayerVersionArn' --output text)

          echo "Published Layer ARN: $LAYER_VERSION_ARN"
          echo "layer_arn=$LAYER_VERSION_ARN" >> $GITHUB_OUTPUT

      - name: Create Lambda deployment package
        run: |
          echo "Creating zip file with Lambda function and utils..."

          # Create deployment package directory
          mkdir -p deployment_package

          # Copy Lambda function
          cp lambdas/documentation_scraper/lambda_function.py ./deployment_package/

          # Copy utils directory (needed for imports)
          cp -r utils ./deployment_package/

          # Create the deployment zip
          cd deployment_package
          zip -r ../lambda-deployment-package.zip . -x "*.pyc" "*/__pycache__/*"
          cd ..

          echo "Lambda deployment package created successfully"

      - name: Deploy Lambda function
        run: |
          FUNCTION_NAME="${{ needs.deploy-infrastructure.outputs.lambda-function-name }}"
          LAYER_ARN="${{ steps.lambda_layer.outputs.layer_arn }}"

          echo "Updating Lambda function: $FUNCTION_NAME"
          echo "Using Layer ARN: $LAYER_ARN"

          # Update function code
          aws lambda update-function-code \
            --function-name "$FUNCTION_NAME" \
            --zip-file fileb://lambda-deployment-package.zip

          echo "Waiting for function code update to complete..."
          aws lambda wait function-updated --function-name "$FUNCTION_NAME"

          # Update function configuration with layer
          aws lambda update-function-configuration \
            --function-name "$FUNCTION_NAME" \
            --layers "$LAYER_ARN" \
            --environment Variables="{
              S3_BUCKET_NAME=${{ secrets.S3_BUCKET_NAME }},
              S3_FOLDER_PREFIX=documents/,
              PYTHONPATH=/opt/python:/var/runtime:/var/task
            }" \
            --timeout 900 \
            --memory-size 1024

          echo "Lambda function updated successfully"

      - name: Output deployment info
        run: |
          echo "ðŸš€ Documentation Scraper Lambda Deployment Complete!"
          echo "Function Name: ${{ needs.deploy-infrastructure.outputs.lambda-function-name }}"
          echo "Layer ARN: ${{ steps.lambda_layer.outputs.layer_arn }}"
          echo "Schedule: Sunday 12:00 PM EDT/11:00 AM EST (16:00 UTC) weekly"
          echo ""
          echo "ðŸ“‹ Next Steps:"
          echo "1. Check CloudWatch logs: /aws/lambda/${{ needs.deploy-infrastructure.outputs.lambda-function-name }}"
          echo "2. Monitor scheduled executions in EventBridge"
          echo "3. Verify scraped content in S3 bucket: ${{ secrets.S3_BUCKET_NAME }}"
