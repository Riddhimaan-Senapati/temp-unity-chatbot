AWSTemplateFormatVersion: "2010-09-09"
Description: "AWS Lambda function for scraping Slack conversations"

Parameters:
  ProjectTag:
    Type: String
    Default: "ai4cw"
    Description: Project tag value for all resources

  S3BucketName:
    Type: String
    Description: Name of the S3 bucket for storing scraped conversations

  SlackBotToken:
    Type: String
    NoEcho: true
    Description: Slack bot token for scraping conversations

  LambdaTimeout:
    Type: Number
    Default: 900
    MinValue: 60
    MaxValue: 900
    Description: Lambda function timeout in seconds (max 15 minutes)

  LambdaMemorySize:
    Type: Number
    Default: 512
    MinValue: 128
    MaxValue: 10240
    Description: Lambda function memory size in MB

  ScheduleExpression:
    Type: String
    Default: "cron(0 16 ? * SUN *)"
    Description: EventBridge schedule expression for automatic scraping (Sunday 12:00 PM EDT/11:00 AM EST = 16:00 UTC)

  EnableScheduledExecution:
    Type: String
    Default: "true"
    AllowedValues: ["true", "false"]
    Description: Whether to enable scheduled execution of the scraper

Resources:
  # IAM Role for Lambda
  SlackScraperRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AWS::StackName}-slack-scraper-role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: S3AccessPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                  - s3:ListBucket
                  - s3:GetObjectMetadata
                  - s3:PutObjectMetadata
                Resource:
                  - !Sub "arn:aws:s3:::${S3BucketName}"
                  - !Sub "arn:aws:s3:::${S3BucketName}/*"
        - PolicyName: CloudWatchLogsPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*"
      Tags:
        - Key: PROJECT
          Value: !Ref ProjectTag

  # Lambda Function
  SlackScraperFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: "unity-slack-channel-scraper"
      Description: Lambda function to scrape Slack conversations and upload to S3
      Runtime: python3.12
      Handler: lambda_function.lambda_handler
      Role: !GetAtt SlackScraperRole.Arn
      Timeout: !Ref LambdaTimeout
      MemorySize: !Ref LambdaMemorySize
      Code:
        ZipFile: |
          import json
          def lambda_handler(event, context):
              return {
                  'statusCode': 200,
                  'body': json.dumps('Placeholder - will be updated with actual code')
              }
      Environment:
        Variables:
          S3_BUCKET_NAME: !Ref S3BucketName
          SCRAPPER_SLACK_BOT_TOKEN: !Ref SlackBotToken
          PYTHONPATH: "/opt/python:/var/runtime:/var/task"
      # Layers will be added by GitHub Actions deployment
      Tags:
        - Key: PROJECT
          Value: !Ref ProjectTag

  # EventBridge Schedule for automatic execution
  SlackScraperScheduleRule:
    Type: AWS::Events::Rule
    Condition: EnableSchedule
    Properties:
      Name: !Sub "${AWS::StackName}-slack-scraper-schedule"
      Description: "Schedule for automatic Slack conversation scraping - Sunday 12:00 PM EDT/11:00 AM EST weekly"
      ScheduleExpression: !Ref ScheduleExpression
      State: ENABLED
      Targets:
        - Arn: !GetAtt SlackScraperFunction.Arn
          Id: SlackScraperTarget
          Input: !Sub |
            {
              "source": "eventbridge-schedule",
              "schedule": "${ScheduleExpression}",
              "scheduled_time": "Sunday 12:00 PM EDT/11:00 AM EST",
              "days_back": 7
            }

  # Permission for EventBridge to invoke Lambda
  SlackScraperSchedulePermission:
    Type: AWS::Lambda::Permission
    Condition: EnableSchedule
    Properties:
      FunctionName: !Ref SlackScraperFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt SlackScraperScheduleRule.Arn

  # CloudWatch Log Group
  SlackScraperLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${SlackScraperFunction}"
      RetentionInDays: 14

Conditions:
  EnableSchedule: !Equals [!Ref EnableScheduledExecution, "true"]

Outputs:
  LambdaFunctionArn:
    Description: ARN of the Slack scraper Lambda function
    Value: !GetAtt SlackScraperFunction.Arn
    Export:
      Name: !Sub "${AWS::StackName}-LambdaFunctionArn"

  LambdaFunctionName:
    Description: Name of the Slack scraper Lambda function
    Value: !Ref SlackScraperFunction
    Export:
      Name: !Sub "${AWS::StackName}-LambdaFunctionName"

  LambdaRoleArn:
    Description: ARN of the Lambda execution role
    Value: !GetAtt SlackScraperRole.Arn
    Export:
      Name: !Sub "${AWS::StackName}-LambdaRoleArn"

  ScheduleRuleArn:
    Condition: EnableSchedule
    Description: ARN of the EventBridge rule for scheduled execution
    Value: !GetAtt SlackScraperScheduleRule.Arn
    Export:
      Name: !Sub "${AWS::StackName}-ScheduleRuleArn"
